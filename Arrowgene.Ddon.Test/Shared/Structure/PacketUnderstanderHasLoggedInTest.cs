using System;
using Arrowgene.Ddon.Shared.Entity;
using Arrowgene.Ddon.Shared.Entity.PacketStructure;
using Xunit;
using Xunit.Abstractions;

namespace Arrowgene.Ddon.Test.Shared.Structure
{
    public class PacketUnderstanderHasLoggedInTest : TestBase
    {
        public PacketUnderstanderHasLoggedInTest(ITestOutputHelper output) : base(output)
        {
        }

        [Fact]
        public void TestUnderstandPacket()
        {
            S2CItemUpdateCharacterItemNtc pcap = EntitySerializer.Get<S2CItemUpdateCharacterItemNtc>().Read(new byte[] {
                0x00, 0x26, 0x00, 0x00, 0x00, 0x03, 0x00, 0x08,  0x46, 0x45, 0x45, 0x33, 0x30, 0x41, 0x35, 0x32,
0x00, 0x00, 0x39, 0x95, 0x00, 0x00, 0x00, 0x00,  0x00, 0x0E, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x20, 0xB8, 0xF8, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x08, 0x46, 0x45, 0x45,
0x33, 0x30, 0x41, 0x35, 0x32, 0x00, 0x00, 0x39,  0x95, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x00,
0x0A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x00, 0x08, 0x33, 0x33, 0x43, 0x39, 0x42, 0x42,  0x45, 0x41, 0x00, 0x00, 0x39, 0x91, 0x00, 0x00,
0x00, 0x01, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xB8,
0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x01, 0x00,
0x00, 0x00, 0x00, 0x01, 0x54, 0xA0, 0xC0
            });
        }

        private byte[] toByteArray(string hexstr) {
            byte[] bytes = new byte[hexstr.Length / 2];

            for (int i = 0; i < hexstr.Length; i += 2)
                bytes[i/2] = Convert.ToByte(hexstr.Substring(i, 2), 16);

            return bytes;
        }
    }
}